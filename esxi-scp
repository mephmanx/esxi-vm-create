#!/usr/bin/python


import argparse  # Argument parser
import os.path  # To check if file exists
import re  # For regex

import paramiko  # For remote ssh
import yaml

from scp import SCPClient

#
#   System wide defaults
#
ConfigData = dict(

    #   Your logfile
    LOG=os.path.expanduser("~") + "/esxi-vm.log",

    #  Enable/Disable dryrun by default
    isDryRun=False,

    #  Enable/Disable Verbose output by default
    isVerbose=False,

    #  Enable/Disable exit summary by default
    isSummary=False,

    #  ESXi host/IP, root login & password
    HOST="esxi",
    USER="root",
    PASSWORD="",

    #  Default number of vCPU's, GB Mem, & GB boot disk
    FILENAME="",
    LOCATION=""

)

ConfigDataFileLocation = os.path.expanduser("~") + "/.esxi-vm.yml"
if os.path.exists(ConfigDataFileLocation):
    FromFileConfigData = yaml.safe_load(open(ConfigDataFileLocation))
    ConfigData.update(FromFileConfigData)

NAME = ""
LOG = ConfigData['LOG']
isDryRun = ConfigData['isDryRun']
isVerbose = ConfigData['isVerbose']
isSummary = ConfigData['isSummary']
HOST = ConfigData['HOST']
USER = ConfigData['USER']
PASSWORD = ConfigData['PASSWORD']
FILENAME = ConfigData['FILENAME']
LOCATION = ConfigData['LOCATION']

ErrorMessages = ""
MAC = ""
GeneratedMAC = ""
ISOfound = False
CheckHasErrors = False
LeastUsedDS = ""
DSPATH = ""
DSSTORE = ""
FullPathExists = False

#
#      Process Arguments
#
parser = argparse.ArgumentParser(description='ESXi SCP utility.')

parser.add_argument('-d', '--dry', dest='isDryRunarg', action='store_true',
                    help="Enable Dry Run mode  (" + str(isDryRun) + ")")
parser.add_argument("-H", "--Host", dest='HOST', type=str, help="ESXi Host/IP  (" + str(HOST) + ")")
parser.add_argument("-U", "--User", dest='USER', type=str, help="ESXi Host username  (" + str(USER) + ")")
parser.add_argument("-P", "--Password", dest='PASSWORD', type=str, help="ESXi Host password  (*****)")
parser.add_argument("-n", "--fileName", dest='FILENAME', type=str, help="File name")
parser.add_argument("-l", "--location", dest='LOCATION', type=str, help="File Location")
parser.add_argument('-V', '--verbose', dest='isVerbosearg', action='store_true',
                    help="Enable Verbose mode  (" + str(isVerbose) + ")")
parser.add_argument('--summary', dest='isSummaryarg', action='store_true',
                    help="Display Summary  (" + str(isSummary) + ")")

args = parser.parse_args()

if args.isDryRunarg:
    isDryRun = True
if args.isVerbosearg:
    isVerbose = True
if args.isSummaryarg:
    isSummary = True
if args.HOST:
    HOST = args.HOST
if args.USER:
    USER = args.USER
if args.PASSWORD:
    PASSWORD = args.PASSWORD
if args.FILENAME:
    FILENAME = args.FILENAME
if args.LOCATION:
    LOCATION = args.LOCATION

print ("Preparing to transfer file -> " + FILENAME)
splitLine = re.split('[/\b]', FILENAME)
Result = "Fail"
while Result == "Fail":
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(HOST, username=USER, password=PASSWORD)

        print ("Removing file -> " + splitLine[len(splitLine) - 1])
        (stdin, stdout, stderr) = ssh.exec_command("rm -rf " + LOCATION + "/" + splitLine[len(splitLine) - 1])
        print ("Transferring -> ")

        with SCPClient(ssh.get_transport()) as scp:
            scp.put(FILENAME, LOCATION)

        print ("Evaluating transfer status -> ")
        (stdin, stdout, stderr) = ssh.exec_command("ls " + LOCATION + "/" + splitLine[len(splitLine) - 1])
        type(stdin)
        if stderr.readlines():
            print ("Transfer failed, retrying")
            Result = "Fail"
        else:
            print ("Transfer succeeded")
            Result = "Pass"
    except:
        Result = "Fail"
